{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Description": "Creates the regional DNS handler lambda function.",
  "Parameters": {
    "DomainName": {
      "Type": "String",
      "Default": "",
      "Description": "Optional custom domain name for the DNS over HTTPS endpoint. If specified, the DoH service will be available at ${DomainName}/dns-query, otherwise at the default API Gateway endpoint."
    },
    "HostedZoneId": {
      "Type": "String",
      "Default": "",
      "Description": "HostedZoneId of domain name. Conditionally required when DomainName is provided."
    }
  },
  "Conditions": {
    "HasDomainName": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "DomainName"
            },
            ""
          ]
        }
      ]
    }
  },
  "Mappings": {
    "GlobalStack": {
      "Outputs": {
        "Fn::Transform": {
          "Name": "AWS::Include",
          "Parameters": {
            "Location": "../global-stack-outputs.json"
          }
        }
      }
    }
  },
  "Resources": {
    "DnsFilterLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "FunctionName": "dns-filter",
        "Handler": "dns-filter-lambda::DnsFilterLambda.Function::FunctionHandler",
        "MemorySize": 1024,
        "Timeout": 30,
        "Runtime": "dotnet8",
        "CodeUri": "../src/dns-filter-lambda",
        "Environment": {
          "Variables": {
            "TABLE_NAME": {
              "Fn::FindInMap": [
                "GlobalStack",
                "Outputs",
                "TableName"
              ]
            }
          }
        },
        "LoggingConfig": {},
        "Role": {
          "Fn::FindInMap": [
            "GlobalStack",
            "Outputs",
            "LambdaRoleArn"
          ]
        }
      }
    },
    "DnsApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "DoHApi",
        "BinaryMediaTypes": [
          "application/dns-message"
        ],
        "EndpointConfiguration": {
          "Types": [
            "REGIONAL"
          ]
        }
      }
    },
    "DnsApiResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "DnsApi",
            "RootResourceId"
          ]
        },
        "PathPart": "dns-query",
        "RestApiId": {
          "Ref": "DnsApi"
        }
      }
    },
    "DnsApiMethodGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "DnsApi"
        },
        "ResourceId": {
          "Ref": "DnsApiResource"
        },
        "HttpMethod": "GET",
        "AuthorizationType": "NONE",
        "RequestParameters": {
          "method.request.querystring.dns": true
        },
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": [
              "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations",
              {
                "LambdaArn": {
                  "Fn::GetAtt": [
                    "DnsFilterLambda",
                    "Arn"
                  ]
                }
              }
            ]
          },
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": [
                "{\"Messages\":[{\"Tag\":\"$context.requestId\",\"Remote\":{\"IpAddress\":\"$context.identity.sourceIp\",\"Port\":0},\"Local\":{\"IpAddress\":\"0.0.0.0\",\"Port\":${ListenerPort}},\"ReceivedAt\":\"$context.requestTime\",\"Data\":\"$input.params('dns')\"}]}",
                {
                  "ListenerPort": {
                    "Fn::FindInMap": [
                      "GlobalStack",
                      "Outputs",
                      "Port"
                    ]
                  }
                }
              ]
            }
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseTemplates": {
                "application/json": "#set($replies = $input.path('$.Replies'))\n#if($replies.size() > 0)\n$util.base64Decode($replies[0].Data)\n#else\n\n#end"
              },
              "ResponseParameters": {
                "method.response.header.Content-Type": "'application/dns-message'"
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Content-Type": false
            }
          }
        ]
      }
    },
    "DnsApiMethodPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "DnsApi"
        },
        "ResourceId": {
          "Ref": "DnsApiResource"
        },
        "HttpMethod": "POST",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": [
              "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations",
              {
                "LambdaArn": {
                  "Fn::GetAtt": [
                    "DnsFilterLambda",
                    "Arn"
                  ]
                }
              }
            ]
          },
          "RequestTemplates": {
            "application/dns-message": {
              "Fn::Sub": [
                "{\n  \"Messages\": [\n {\n \"Tag\": \"$context.requestId\",\n \"Remote\": {\n \"IpAddress\": \"$context.identity.sourceIp\",\n \"Port\": 0\n },\n \"Local\": {\n \"IpAddress\": \"0.0.0.0\",\n \"Port\": ${ListenerPort}\n },\n \"ReceivedAt\": \"$context.requestTime\",\n \"Data\": \"$util.base64Encode($input.body)\"\n }\n ]\n}",
                {
                  "ListenerPort": {
                    "Fn::FindInMap": [
                      "GlobalStack",
                      "Outputs",
                      "Port"
                    ]
                  }
                }
              ]
            }
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseTemplates": {
                "application/dns-message": "#set($replies = $input.path('$.Replies'))\n#if($replies.size() > 0)\n$util.base64Decode($replies[0].Data)\n#else\n\n#end"
              },
              "ResponseParameters": {
                "method.response.header.Content-Type": "'application/dns-message'"
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Content-Type": false
            }
          }
        ]
      }
    },
    "DnsApiCertificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "Condition": "HasDomainName",
      "Properties": {
        "DomainName": {
          "Ref": "DomainName"
        },
        "ValidationMethod": "DNS",
        "DomainValidationOptions": [
          {
            "DomainName": {
              "Ref": "DomainName"
            },
            "HostedZoneId": {
              "Ref": "HostedZoneId"
            }
          }
        ]
      }
    },
    "DnsApiCustomDomain": {
      "Type": "AWS::ApiGateway::DomainName",
      "Condition": "HasDomainName",
      "Properties": {
        "DomainName": {
          "Ref": "DomainName"
        },
        "SecurityPolicy": "TLS_1_2",
        "EndpointConfiguration": {
          "Types": [
            "REGIONAL"
          ]
        },
        "RegionalCertificateArn": {
          "Ref": "DnsApiCertificate"
        }
      }
    },
    "DnsApiBasePathMapping": {
      "Type": "AWS::ApiGateway::BasePathMapping",
      "Condition": "HasDomainName",
      "Properties": {
        "DomainName": {
          "Ref": "DnsApiCustomDomain"
        },
        "RestApiId": {
          "Ref": "DnsApi"
        },
        "Stage": {
          "Ref": "DnsApiStage"
        }
      }
    },
    "DnsApiRoute53Record": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "HasDomainName",
      "Properties": {
        "HostedZoneId": {
          "Ref": "HostedZoneId"
        },
        "Name": {
          "Ref": "DomainName"
        },
        "Type": "A",
        "Region": {
          "Ref": "AWS::Region"
        },
        "SetIdentifier": {
          "Fn::Sub": "doh-${AWS::Region}"
        },
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "DnsApiCustomDomain",
              "RegionalDomainName"
            ]
          },
          "HostedZoneId": {
            "Fn::GetAtt": [
              "DnsApiCustomDomain",
              "RegionalHostedZoneId"
            ]
          }
        }
      }
    },
    "LambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "DnsFilterLambda",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${DnsApi}/*/*/dns-query"
        }
      }
    },
    "ApiGatewayLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/apigateway/${AWS::StackName}-doh-api"
        },
        "RetentionInDays": 7
      }
    },
    "DnsApiDeployment0": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "DnsApiMethodGet",
        "DnsApiMethodPost"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "DnsApi"
        }
      }
    },
    "DnsApiStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "RestApiId": {
          "Ref": "DnsApi"
        },
        "DeploymentId": {
          "Ref": "DnsApiDeployment0"
        },
        "StageName": "v0",
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiGatewayLogGroup",
              "Arn"
            ]
          }
        },
        "MethodSettings": [
          {
            "ResourcePath": "/*",
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "DataTraceEnabled": true,
            "MetricsEnabled": true
          }
        ]
      }
    }
  },
  "Outputs": {
    "DnsFilterArn": {
      "Value": {
        "Fn::GetAtt": [
          "DnsFilterLambda",
          "Arn"
        ]
      }
    },
    "DnsApiUrl": {
      "Value": {
        "Fn::If": [
          "HasDomainName",
          {
            "Fn::Sub": "https://${DomainName}/dns-query"
          },
          {
            "Fn::Sub": "https://${DnsApi}.execute-api.${AWS::Region}.amazonaws.com/v0/dns-query"
          }
        ]
      },
      "Description": "DNS over HTTPS endpoint URL"
    },
    "DnsApiRegionalEndpoint": {
      "Value": {
        "Fn::If": [
          "HasDomainName",
          {
            "Fn::GetAtt": [
              "DnsApiCustomDomain",
              "RegionalDomainName"
            ]
          },
          {
            "Fn::Sub": "${DnsApi}.execute-api.${AWS::Region}.amazonaws.com"
          }
        ]
      },
      "Description": "Regional API Gateway endpoint",
      "Condition": "HasDomainName"
    }
  }
}