{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Description": "Creates the regional DNS handler lambda function, API and other resources.",
  "Parameters": {
    "DomainName": {
      "Type": "String",
      "Default": "",
      "Description": "Optional custom domain name for the DNS over HTTPS endpoint. If specified, the DoH service will be available at ${DomainName}/dns-query, otherwise at the default API Gateway endpoint."
    },
    "HostedZoneId": {
      "Type": "String",
      "Default": "",
      "Description": "HostedZoneId of domain name. Conditionally required when DomainName is provided."
    },
    "UpstreamDns": {
      "Description": "Upstream DNS server to use for queries that aren't blocked or redirected",
      "Type": "String",
      "Default": "1.0.0.3"
    },
    "DnsLogRetentionDays": {
      "Description": "Number of days to retain DNS query logs in S3, and other logs in CloudWatch Logs",
      "Type": "Number",
      "Default": 30
    },
    "ClientCidrToAllow": {
      "Description": "The CIDR describine which IP addresses should be allowed to use the DoH API. Default is open/everyone.",
      "Type": "String",
      "Default": "0.0.0.0/0"
    }
  },
  "Conditions": {
    "HasDomainName": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "DomainName"
            },
            ""
          ]
        }
      ]
    },
    "LogQueries": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "DnsLogRetentionDays"
            },
            0
          ]
        }
      ]
    }
  },
  "Mappings": {
    "GlobalStack": {
      "Outputs": {
        "Fn::Transform": {
          "Name": "AWS::Include",
          "Parameters": {
            "Location": "../global-stack-outputs.json"
          }
        }
      }
    }
  },
  "Resources": {
    "RegionDataBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Sub": "dns-data-${AWS::AccountId}-${AWS::Region}"
        },
        "NotificationConfiguration": {
          "EventBridgeConfiguration": {
            "EventBridgeEnabled": true
          }
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Id": "DeleteOldLogs",
              "Status": "Enabled",
              "ExpirationInDays": {
                "Ref": "DnsLogRetentionDays"
              },
              "Prefix": "logs/"
            }
          ]
        }
      }
    },
    "FirehoseDeliveryPolicy": {
      "Condition": "LogQueries",
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Sub": "FirehoseDeliveryPolicy-${AWS::Region}"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:AbortMultipartUpload",
                "s3:GetBucketLocation",
                "s3:GetObject",
                "s3:ListBucket",
                "s3:ListBucketMultipartUploads",
                "s3:PutObject"
              ],
              "Resource": [
                {
                  "Fn::Sub": "${RegionDataBucket.Arn}"
                },
                {
                  "Fn::Sub": "${RegionDataBucket.Arn}/logs/*"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Fn::Select": [
              1,
              {
                "Fn::Split": [
                  "/",
                  {
                    "Fn::FindInMap": [
                      "GlobalStack",
                      "Outputs",
                      "FirehoseRoleArn"
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "QueryLogFirehose": {
      "Condition": "LogQueries",
      "Type": "AWS::KinesisFirehose::DeliveryStream",
      "DependsOn": "FirehoseDeliveryPolicy",
      "Properties": {
        "DeliveryStreamName": {
          "Fn::Sub": "dns-query-logs-${AWS::Region}"
        },
        "DeliveryStreamType": "DirectPut",
        "S3DestinationConfiguration": {
          "BucketARN": {
            "Fn::GetAtt": [
              "RegionDataBucket",
              "Arn"
            ]
          },
          "RoleARN": {
            "Fn::FindInMap": [
              "GlobalStack",
              "Outputs",
              "FirehoseRoleArn"
            ]
          },
          "Prefix": "logs/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/",
          "ErrorOutputPrefix": "errors/",
          "BufferingHints": {
            "SizeInMBs": 5,
            "IntervalInSeconds": 60
          },
          "CompressionFormat": "GZIP"
        }
      }
    },
    "DnsFilterFirehosePolicy": {
      "Condition": "LogQueries",
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Sub": "DnsFilterFirehosePolicy-${AWS::Region}"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "firehose:PutRecord",
                "firehose:PutRecordBatch"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "QueryLogFirehose",
                  "Arn"
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Fn::Select": [
              1,
              {
                "Fn::Split": [
                  "/",
                  {
                    "Fn::FindInMap": [
                      "GlobalStack",
                      "Outputs",
                      "DnsHandlerLambdaRoleArn"
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "AnalysisS3Policy": {
      "Condition": "LogQueries",
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Sub": "AnalysisS3Policy-${AWS::Region}"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject"
              ],
              "Resource": {
                "Fn::Sub": "${RegionDataBucket.Arn}/*"
              }
            }
          ]
        },
        "Roles": [
          {
            "Fn::Select": [
              1,
              {
                "Fn::Split": [
                  "/",
                  {
                    "Fn::FindInMap": [
                      "GlobalStack",
                      "Outputs",
                      "AnalysisLambdaRoleArn"
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "AnalysisEventRule": {
      "Condition": "LogQueries",
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Trigger DNS analysis when new query logs are created",
        "EventPattern": {
          "source": [
            "aws.s3"
          ],
          "detail-type": [
            "Object Created"
          ],
          "detail": {
            "bucket": {
              "name": [
                {
                  "Ref": "RegionDataBucket"
                }
              ]
            }
          }
        },
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "DnsAnalysisLambda",
                "Arn"
              ]
            },
            "Id": "DnsAnalysisTarget"
          }
        ]
      }
    },
    "AnalysisEventPermission": {
      "Condition": "LogQueries",
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "DnsAnalysisLambda"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "AnalysisEventRule",
            "Arn"
          ]
        }
      }
    },
    "WriteAsnDataS3Policy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Sub": "WriteAsnDataS3Policy-${AWS::Region}"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject"
              ],
              "Resource": {
                "Fn::Sub": "${RegionDataBucket.Arn}/asn-block-data.bin"
              }
            }
          ]
        },
        "Roles": [
          {
            "Fn::Select": [
              1,
              {
                "Fn::Split": [
                  "/",
                  {
                    "Fn::FindInMap": [
                      "GlobalStack",
                      "Outputs",
                      "AsnDataLambdaRoleArn"
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "ReadAsnDataS3Policy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Sub": "WriteAsnDataS3Policy-${AWS::Region}"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket"
              ],
              "Resource": {
                "Fn::Sub": "${RegionDataBucket.Arn}"
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject"
              ],
              "Resource": {
                "Fn::Sub": "${RegionDataBucket.Arn}/asn-block-data.bin"
              }
            }
          ]
        },
        "Roles": [
          {
            "Fn::Select": [
              1,
              {
                "Fn::Split": [
                  "/",
                  {
                    "Fn::FindInMap": [
                      "GlobalStack",
                      "Outputs",
                      "AsnDataLambdaRoleArn"
                    ]
                  }
                ]
              }
            ]
          },
          {
            "Fn::Select": [
              1,
              {
                "Fn::Split": [
                  "/",
                  {
                    "Fn::FindInMap": [
                      "GlobalStack",
                      "Outputs",
                      "DnsHandlerLambdaRoleArn"
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    "DnsAsnDataLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "FunctionName": "dns-asn-data",
        "Handler": "dns-asn-data-lambda::DnsAsnDataLambda.Function::FunctionHandler",
        "MemorySize": 1024,
        "Timeout": 30,
        "Runtime": "dotnet8",
        "CodeUri": "../src/dns-asn-data-lambda/",
        "Environment": {
          "Variables": {
            "TABLE_NAME": {
              "Fn::FindInMap": [
                "GlobalStack",
                "Outputs",
                "TableName"
              ]
            },
            "BUCKET_NAME": {
              "Ref": "RegionDataBucket"
            }
          }
        },
        "Role": {
          "Fn::FindInMap": [
            "GlobalStack",
            "Outputs",
            "AsnDataLambdaRoleArn"
          ]
        },
        "Events": {
          "Hourly": {
            "Type": "Schedule",
            "Properties": {
              "Schedule": "rate(1 hour)",
              "Input": {
                "Fn::Sub": "{\"action\": \"update\"}"
              }
            }
          }
        }
      }
    },
    "DnsAnalysisLambda": {
      "Condition": "LogQueries",
      "DependsOn": "AnalysisS3Policy",
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "FunctionName": "dns-analysis",
        "CodeUri": "../src/dns-analysis-lambda",
        "Handler": "dns-analysis-lambda::DnsAnalysisLambda.Function::FunctionHandler",
        "Runtime": "dotnet8",
        "Timeout": 30,
        "MemorySize": 1024,
        "Role": {
          "Fn::FindInMap": [
            "GlobalStack",
            "Outputs",
            "AnalysisLambdaRoleArn"
          ]
        },
        "Environment": {
          "Variables": {
            "TABLE_NAME": {
              "Fn::FindInMap": [
                "GlobalStack",
                "Outputs",
                "TableName"
              ]
            }
          }
        }
      }
    },
    "DnsFilterLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "FunctionName": "dns-filter",
        "Handler": "dns-filter-lambda::DnsFilterLambda.Function::FunctionHandler",
        "MemorySize": 1024,
        "Timeout": 30,
        "Runtime": "dotnet8",
        "CodeUri": "../src/dns-filter-lambda",
        "Environment": {
          "Variables": {
            "TABLE_NAME": {
              "Fn::FindInMap": [
                "GlobalStack",
                "Outputs",
                "TableName"
              ]
            },
            "BUCKET_NAME": {
              "Ref": "RegionDataBucket"
            },
            "LOG_FIREHOSE_STREAM": {
              "Fn::If": [
                "LogQueries",
                {
                  "Ref": "QueryLogFirehose"
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "UPSTREAM_DNS": {
              "Ref": "UpstreamDns"
            }
          }
        },
        "LoggingConfig": {},
        "Role": {
          "Fn::FindInMap": [
            "GlobalStack",
            "Outputs",
            "DnsHandlerLambdaRoleArn"
          ]
        }
      }
    },
    "DnsApiAdapterLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "FunctionName": "dns-api-adapter",
        "MemorySize": 1024,
        "Timeout": 30,
        "Runtime": "dotnet8",
        "CodeUri": "../src/dns-api-adapter-lambda/",
        "Handler": "dns-api-adapter-lambda::DnsApiAdapterLambda.Function::FunctionHandler",
        "Environment": {
          "Variables": {
            "DNS_FILTER_FUNCTION_NAME": {
              "Ref": "DnsFilterLambda"
            },
            "UDP_LISTENER_PORT": {
              "Fn::FindInMap": [
                "GlobalStack",
                "Outputs",
                "Port"
              ]
            }
          }
        },
        "Policies": [
          "AWSLambdaBasicExecutionRole",
          {
            "LambdaInvokePolicy": {
              "FunctionName": {
                "Ref": "DnsFilterLambda"
              }
            }
          }
        ]
      }
    },
    "DnsApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "DoHApi",
        "Description": "Implements the root page and DoH API for the DNS filtering service",
        "BinaryMediaTypes": [
          "application/dns-message"
        ],
        "EndpointConfiguration": {
          "Types": [
            "REGIONAL"
          ]
        },
        "Policy": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "execute-api:Invoke",
              "Resource": "execute-api:/*"
            }
          ]
        }
      }
    },
    "DnsApiDohResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "DnsApi",
            "RootResourceId"
          ]
        },
        "PathPart": "dns-query",
        "RestApiId": {
          "Ref": "DnsApi"
        }
      }
    },
    "DnsApiDohMethods": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "DnsApi"
        },
        "ResourceId": {
          "Ref": "DnsApiDohResource"
        },
        "HttpMethod": "ANY",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": [
              "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations",
              {
                "LambdaArn": {
                  "Fn::GetAtt": [
                    "DnsApiAdapterLambda",
                    "Arn"
                  ]
                }
              }
            ]
          }
        }
      }
    },
    "DnsApiRootMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {
          "Ref": "DnsApi"
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "DnsApi",
            "RootResourceId"
          ]
        },
        "HttpMethod": "GET",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Content-Type": "'text/html'"
              },
              "ResponseTemplates": {
                "text/html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>MyDNS Demo</title>\n    <style>\n        body {\n            font-family: system-ui, -apple-system, sans-serif;\n            font-size: 18px;\n            line-height: 1.6;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 2rem;\n            color: #333;\n        }\n        h1 {\n            color: #2c3e50;\n            margin-bottom: 1.5rem;\n        }\n        h2 {\n            color: #34495e;\n            margin-top: 2rem;\n            margin-bottom: 1rem;\n        }\n        p {\n            margin-bottom: 1rem;\n        }\n        ul {\n            margin-bottom: 1rem;\n            padding-left: 2rem;\n        }\n        li {\n            margin-bottom: 0.5rem;\n        }\n        a {\n            color: #3498db;\n            text-decoration: none;\n        }\n        a:hover {\n            text-decoration: underline;\n        }\n        code {\n            background-color: #f8f9fa;\n            padding: 0.2rem 0.4rem;\n            border-radius: 3px;\n            font-family: 'Courier New', monospace;\n        }\n    </style>\n</head>\n<body>\n    <h1>MyDNS</h1>\n    \n    <p>Welcome to MyDNS, a DNS filtering service that provides secure and customizable DNS resolution with advanced threat protection and analytics capabilities.</p>\n    \n    <p>This project was developed as part of a hackathon to demonstrate modern DNS filtering techniques using AWS serverless infrastructure. You can learn more about this implementation through the following resources:</p>\n    \n    <ul>\n        <li><a href=\"https://awslambdahackathon.devpost.com/\" target=\"_blank\">Hackathon Entry</a> - View the original hackathon submission</li>\n        <li><a href=\"https://proxylity.com/articles/run-your-own-serveless-dns.html\" target=\"_blank\">Proxylity Article</a> - Read the detailed technical article</li>\n        <li><a href=\"https://github.com/proxylity/examples/tree/main/dns-filter\" target=\"_blank\">GitHub Repository</a> - Access the complete source code</li>\n    </ul>\n    \n    <h2>Configuration</h2>\n    \n    <p>To use MyDNS, you can configure your browser or device to use DNS over HTTPS (DoH) for secure DNS resolution. Most modern browsers support DoH configuration in their network settings.</p>\n    \n    <ul>\n        <li><strong>DoH Endpoint:</strong> <code>https://doh.whitepuffies.com/dns-query</code></li>\n        <li><strong>UDP DNS Endpoint:</strong> <code>ingress-1.proxylity.com:2069</code></li>\n    </ul>\n    \n    <p>For browser configuration, navigate to your browser's network or privacy settings and look for \"DNS over HTTPS\" or \"Secure DNS\" options. Enter the DoH endpoint URL above to start using MyDNS for secure DNS resolution.</p>\n</body>\n</html>"
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Content-Type": true
            }
          }
        ]
      }
    },
    "DnsApiCertificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "Condition": "HasDomainName",
      "Properties": {
        "DomainName": {
          "Ref": "DomainName"
        },
        "ValidationMethod": "DNS",
        "DomainValidationOptions": [
          {
            "DomainName": {
              "Ref": "DomainName"
            },
            "HostedZoneId": {
              "Ref": "HostedZoneId"
            }
          }
        ]
      }
    },
    "DnsApiCustomDomain": {
      "Type": "AWS::ApiGateway::DomainName",
      "Condition": "HasDomainName",
      "Properties": {
        "DomainName": {
          "Ref": "DomainName"
        },
        "SecurityPolicy": "TLS_1_2",
        "EndpointConfiguration": {
          "Types": [
            "REGIONAL"
          ]
        },
        "RegionalCertificateArn": {
          "Ref": "DnsApiCertificate"
        }
      }
    },
    "DnsApiBasePathMapping": {
      "Type": "AWS::ApiGateway::BasePathMapping",
      "Condition": "HasDomainName",
      "Properties": {
        "DomainName": {
          "Ref": "DnsApiCustomDomain"
        },
        "RestApiId": {
          "Ref": "DnsApi"
        },
        "Stage": {
          "Ref": "DnsApiStage"
        }
      }
    },
    "DnsApiRoute53Record": {
      "Type": "AWS::Route53::RecordSet",
      "Condition": "HasDomainName",
      "Properties": {
        "HostedZoneId": {
          "Ref": "HostedZoneId"
        },
        "Name": {
          "Ref": "DomainName"
        },
        "Type": "A",
        "Region": {
          "Ref": "AWS::Region"
        },
        "SetIdentifier": {
          "Fn::Sub": "doh-${AWS::Region}"
        },
        "AliasTarget": {
          "DNSName": {
            "Fn::GetAtt": [
              "DnsApiCustomDomain",
              "RegionalDomainName"
            ]
          },
          "HostedZoneId": {
            "Fn::GetAtt": [
              "DnsApiCustomDomain",
              "RegionalHostedZoneId"
            ]
          }
        }
      }
    },
    "LambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "DnsApiAdapterLambda",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${DnsApi}/*/*/dns-query"
        }
      }
    },
    "ApiGatewayLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/aws/apigateway/${AWS::StackName}-doh-api"
        },
        "RetentionInDays": 7
      }
    },
    "DnsApiDeployment1": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "DnsApiDohMethods",
        "DnsApiRootMethod"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "DnsApi"
        }
      }
    },
    "DnsApiStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "RestApiId": {
          "Ref": "DnsApi"
        },
        "DeploymentId": {
          "Ref": "DnsApiDeployment1"
        },
        "StageName": "v0",
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ApiGatewayLogGroup",
              "Arn"
            ]
          },
          "Format": "{ \"requestId\":\"$context.requestId\", \"ip\":\"$context.identity.sourceIp\", \"caller\":\"$context.identity.caller\", \"user\":\"$context.identity.user\", \"requestTime\":\"$context.requestTime\", \"httpMethod\":\"$context.httpMethod\", \"resourcePath\":\"$context.resourcePath\", \"status\":\"$context.status\", \"protocol\":\"$context.protocol\", \"responseLength\":\"$context.responseLength\" }"
        },
        "MethodSettings": [
          {
            "ResourcePath": "/*",
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "DataTraceEnabled": true,
            "MetricsEnabled": true
          }
        ]
      }
    }
  },
  "Outputs": {
    "DnsApiUrl": {
      "Value": {
        "Fn::If": [
          "HasDomainName",
          {
            "Fn::Sub": "https://${DomainName}/dns-query"
          },
          {
            "Fn::Sub": "https://${DnsApi}.execute-api.${AWS::Region}.amazonaws.com/v0/dns-query"
          }
        ]
      },
      "Description": "DNS over HTTPS endpoint URL"
    },
    "DnsUdpEndpoint": {
      "Value": {
        "Fn::FindInMap": [
          "GlobalStack",
          "Outputs",
          "Endpoint"
        ]
      },
      "Description": "UDP DNS endpoint (for nslookup, dig, and non-browser devices). Note this isn't the standard port 53, but a custom port and configuration options will depend on the device/network."
    },
    "DnsApiRegionalEndpoint": {
      "Value": {
        "Fn::If": [
          "HasDomainName",
          {
            "Fn::GetAtt": [
              "DnsApiCustomDomain",
              "RegionalDomainName"
            ]
          },
          {
            "Fn::Sub": "${DnsApi}.execute-api.${AWS::Region}.amazonaws.com"
          }
        ]
      },
      "Description": "Regional API Gateway endpoint",
      "Condition": "HasDomainName"
    }
  }
}